import { useCallback, useEffect, useRef, useState } from 'react';

import { fetchStores } from '@/features/rental/map/api/apis';
import { mapFilterStateToApiParams } from '@/features/rental/map/utils/filterParamsMapper';

import type { Store } from '@/features/rental/map/lib/types';
import type { RentalFilterState } from '@/features/rental/map/model/rentalFilterReducer';

export const useFetchStoresHooks = (
  map: kakao.maps.Map | null,
  filterState?: RentalFilterState,
) => {
  const [stores, setStores] = useState<Store[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [currentBounds, setCurrentBounds] = useState({
    swLat: 33.0,
    swLng: 124.0,
    neLat: 39.0,
    neLng: 132.0,
  });

  const debounceRef = useRef<NodeJS.Timeout | null>(null);
  const lastBoundsRef = useRef(currentBounds);
  const lastFilterStateRef = useRef(filterState);
  const lastStoresRef = useRef<Store[]>([]);
  const isInitializedRef = useRef(false);

  // ÏßÄÎèÑ bounds ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
  const updateStoresByBounds = useCallback(async () => {
    if (!map) {
      return;
    }

    try {
      const bounds = map.getBounds();
      const swLatLng = bounds.getSouthWest();
      const neLatLng = bounds.getNorthEast();
      const zoomLevel = map.getLevel();

      const newBounds = {
        swLat: swLatLng.getLat(),
        swLng: swLatLng.getLng(),
        neLat: neLatLng.getLat(),
        neLng: neLatLng.getLng(),
      };

      // boundsÎÇò filterStateÍ∞Ä Ïã§Ï†úÎ°ú Î≥ÄÍ≤ΩÎêòÏóàÎäîÏßÄ ÌôïÏù∏
      const boundsChanged = JSON.stringify(newBounds) !== JSON.stringify(lastBoundsRef.current);
      const filterChanged =
        JSON.stringify(filterState) !== JSON.stringify(lastFilterStateRef.current);

      if (!boundsChanged && !filterChanged) {
        return; // Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏóÜÏúºÎ©¥ API Ìò∏Ï∂úÌïòÏßÄ ÏïäÏùå
      }

      // Ïù¥Ï†Ñ ÌÉÄÏù¥Î®∏Í∞Ä ÏûàÎã§Î©¥ Ï∑®ÏÜå
      if (debounceRef.current) {
        clearTimeout(debounceRef.current);
      }

      // 500ms ÎîîÎ∞îÏö¥Ïã±
      debounceRef.current = setTimeout(async () => {
        try {
          console.log('üöÄ API Ìò∏Ï∂ú ÏãúÏûë');
          setIsLoading(true);

          setCurrentBounds(newBounds);
          lastBoundsRef.current = newBounds;
          lastFilterStateRef.current = filterState;

          const mergedParams = mapFilterStateToApiParams(newBounds, filterState, zoomLevel);
          console.log('üîß API ÌååÎùºÎØ∏ÌÑ∞:', mergedParams);

          const stores = await fetchStores(mergedParams);
          console.log('üì¶ Î∞õÏïÑÏò® stores Í∞úÏàò:', stores.length);

          // storesÍ∞Ä Ïã§Ï†úÎ°ú Î≥ÄÍ≤ΩÎêòÏóàÎäîÏßÄ ÌôïÏù∏
          const storesChanged = JSON.stringify(stores) !== JSON.stringify(lastStoresRef.current);
          if (storesChanged) {
            setStores(stores);
            lastStoresRef.current = stores;
          }
        } catch (e) {
          console.error('‚ùå Í∞ÄÎßπÏ†ê Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:', e);
        } finally {
          setIsLoading(false);
        }
      }, 500);
    } catch (error) {
      console.error('‚ùå Îßµ bounds Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error);
    }
  }, [map, filterState]);

  // Ï¥àÍ∏∞ Î°úÎìú Î∞è ÏßÄÎèÑ bounds Î≥ÄÍ≤Ω Í∞êÏßÄ
  useEffect(() => {
    if (!map) {
      return;
    }

    // Ï¥àÍ∏∞Ìôî ÌîåÎûòÍ∑∏ ÌôïÏù∏
    if (!isInitializedRef.current) {
      console.log('üéØ Îßµ Ï¥àÍ∏∞Ìôî Î∞è Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù');
      isInitializedRef.current = true;

      // Ï¥àÍ∏∞ Î°úÎìú
      updateStoresByBounds();

      // ÏßÄÎèÑ Ïù¥Îèô/Ï§å Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù
      const boundsChangedListener = () => {
        updateStoresByBounds();
      };

      window.kakao.maps.event.addListener(map, 'bounds_changed', boundsChangedListener);
      window.kakao.maps.event.addListener(map, 'zoom_changed', boundsChangedListener);

      // ÌÅ¥Î¶∞ÏóÖ
      return () => {
        if (debounceRef.current) {
          clearTimeout(debounceRef.current);
        }
        window.kakao.maps.event.removeListener(map, 'bounds_changed', boundsChangedListener);
        window.kakao.maps.event.removeListener(map, 'zoom_changed', boundsChangedListener);
      };
    }
  }, [map, updateStoresByBounds]);

  // filterState Î≥ÄÍ≤Ω Ïãú Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏ (Ï¥àÍ∏∞Ìôî ÌõÑÏóêÎßå)
  useEffect(() => {
    if (map && filterState && isInitializedRef.current) {
      console.log('üîç filterState Î≥ÄÍ≤Ω Í∞êÏßÄ');
      updateStoresByBounds();
    }
  }, [filterState, map, updateStoresByBounds]);

  return {
    stores,
    isLoading,
    currentBounds,
    refreshStores: updateStoresByBounds,
  };
};
